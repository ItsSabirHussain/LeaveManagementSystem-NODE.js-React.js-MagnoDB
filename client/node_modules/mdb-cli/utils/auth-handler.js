'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var config = require('../config/index');

var path = require('path');

var AuthHandler =
/*#__PURE__*/
function () {
  function AuthHandler() {
    var checkAuth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    _classCallCheck(this, AuthHandler);

    this.result = [];
    this.headers = {};
    this._tokenDir = config.tokenDir;
    this._tokenFile = path.join(config.tokenDir, config.tokenFile);
    this.isAuth = false;
    this.checkAuth = checkAuth;
    this.checkForAuth();
    this.setAuthHeader();
  }

  _createClass(AuthHandler, [{
    key: "checkForAuth",
    value: function checkForAuth() {
      if (fs.existsSync(this._tokenDir) && fs.existsSync(this._tokenFile)) {
        this.isAuth = true;
      }
    }
  }, {
    key: "setAuthHeader",
    value: function setAuthHeader() {
      if (!this.checkAuth) {
        return;
      }

      if (!this.isAuth) {
        this.result = [{
          'Status': 'not logged in',
          'Message': 'Please login first'
        }];
        console.table(this.result);
        process.exit(0);
      }

      this.headers = {
        'Authorization': "Bearer ".concat(fs.readFileSync(this._tokenFile, {
          encoding: 'utf8'
        }))
      };
    }
  }]);

  return AuthHandler;
}();

module.exports = AuthHandler;