'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var helpers = require('../helpers/');

var ListHandler =
/*#__PURE__*/
function () {
  function ListHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, ListHandler);

    this.result = [];
    this.authHeaders = {};
    this.authHandler = authHandler;
    this.setAuthHeader();
  }

  _createClass(ListHandler, [{
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.result = this.authHandler.result;
      this.authHeaders = this.authHandler.headers;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "fetchProducts",
    value: function fetchProducts() {
      var _this = this;

      return helpers.fetchProducts(this.authHeaders).then(function (products) {
        var userReadable = _this._mapToUserReadable(products);

        _this.result = helpers.getSorted(userReadable, 'Product Name');
        return Promise.resolve();
      }, function (error) {
        return Promise.reject(error);
      });
    }
  }, {
    key: "_mapToUserReadable",
    value: function _mapToUserReadable(products) {
      return products.map(function (product) {
        var isPro = product.product_id !== null;
        var notAvailableMsg = isPro ? "No ( https://mdbootstrap.com/products/".concat(product.product_slug, "/ )") : 'No';
        return {
          'Product Name': product.product_title.replace(/ version| \[standard Bootstrap] /g, ''),
          'Available': product.available ? 'Yes' : notAvailableMsg
        };
      });
    }
  }]);

  return ListHandler;
}();

module.exports = ListHandler;