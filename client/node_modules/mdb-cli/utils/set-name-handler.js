'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var SetNameHandler =
/*#__PURE__*/
function () {
  function SetNameHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, SetNameHandler);

    this.result = [];
    this.name = '';
    this.authHandler = authHandler;
  }

  _createClass(SetNameHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "askForNewProjectName",
    value: function askForNewProjectName() {
      var _this = this;

      var prompt = require('inquirer').createPromptModule();

      return prompt([{
        type: 'text',
        message: 'Set new project name',
        name: 'name',
        validate: function validate(value) {
          /* istanbul ignore next */
          var valid = Boolean(value);
          /* istanbul ignore next */

          return valid || 'Project name must not be empty.';
        }
      }]).then(function (answers) {
        _this.name = answers.name;
      });
    }
  }, {
    key: "setName",
    value: function setName() {
      var _this2 = this;

      var _require = require('../helpers/deserialize-object-from-file'),
          deserializeJsonFile = _require.deserializeJsonFile;

      var fileName = 'package.json';
      return deserializeJsonFile(fileName).then(function (fileContent) {
        var _require2 = require('../helpers/serialize-object-to-file'),
            serializeJsonFile = _require2.serializeJsonFile;

        var oldName = fileContent.name;
        fileContent.name = _this2.name;
        return serializeJsonFile(fileName, fileContent).then(function () {
          _this2.result = [{
            'Status': 'name changed',
            'Message': "Package name has been changed from ".concat(oldName, " to ").concat(_this2.name, " successful")
          }];
          return Promise.resolve();
        }, function (error) {
          _this2.result = [{
            'Status': 'name not changed',
            'Message': "Problem with ".concat(fileName, " serialization")
          }];
          return Promise.reject(error);
        });
      }, function (error) {
        _this2.result = [{
          'Status': 'name not changed',
          'Message': "Problem with ".concat(fileName, " deserialization")
        }];
        return Promise.reject(error);
      });
    }
  }]);

  return SetNameHandler;
}();

module.exports = SetNameHandler;