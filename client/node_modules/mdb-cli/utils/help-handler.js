'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var HelpHandler =
/*#__PURE__*/
function () {
  function HelpHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler(false);

    _classCallCheck(this, HelpHandler);

    this.authHandler = authHandler;
  }

  _createClass(HelpHandler, [{
    key: "setResult",
    value: function setResult() {
      var authCommand = this.authHandler.isAuth ? {
        'Command': 'logout',
        'Description': 'logout from cli'
      } : {
        'Command': 'login',
        'Description': 'log in to your MDB account'
      };
      this.result = [{
        'Command': 'help',
        'Description': 'show this info'
      }, authCommand, {
        'Command': 'list',
        'Description': 'list available packages'
      }, {
        'Command': 'orders',
        'Description': 'list all your orders'
      }, {
        'Command': 'init',
        'Description': 'initialize chosen package'
      }, {
        'Command': 'publish',
        'Description': 'publish your project'
      }, {
        'Command': 'set-name',
        'Description': 'change your project name'
      }];
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }]);

  return HelpHandler;
}();

module.exports = HelpHandler;