'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var archiver = require('archiver');

var config = require('../config');

var helpers = require('../helpers');

var HttpWrapper = require('../utils/http-wrapper');

var Ora = require('ora');

var path = require('path');

var PublishHandler =
/*#__PURE__*/
function () {
  function PublishHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, PublishHandler);

    this.result = [];
    this.cwd = process.cwd();
    this.projectName = '';
    this.packageName = '';
    this.last = 0;
    this.sent = 0;
    this.endMsg = '';
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/project/publish',
      method: 'POST'
    };
    this.authHandler = authHandler;
    this.setAuthHeader();
  }

  _createClass(PublishHandler, [{
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.result = this.authHandler.result;
      this.options.headers = this.authHandler.headers;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "setProjectName",
    value: function () {
      var _setProjectName = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var packageJsonPath, metadataPath, packageJson, projectMetadata;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                packageJsonPath = path.join(this.cwd, 'package.json');
                metadataPath = path.join(this.cwd, '.mdb');
                _context.next = 5;
                return helpers.deserializeJsonFile(packageJsonPath);

              case 5:
                packageJson = _context.sent;
                _context.next = 8;
                return helpers.deserializeJsonFile(metadataPath)["catch"](function (error) {
                  return console.log("Problem with reading project metadata:\n".concat(error));
                });

              case 8:
                projectMetadata = _context.sent;
                this.projectName = packageJson.name;
                this.packageName = projectMetadata.packageName || '';
                return _context.abrupt("return", Promise.resolve());

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](0);

                if (!(_context.t0.code && _context.t0.code === 'ENOENT')) {
                  _context.next = 18;
                  break;
                }

                return _context.abrupt("return", this.handleMissingPackageJson());

              case 18:
                throw _context.t0;

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 14]]);
      }));

      function setProjectName() {
        return _setProjectName.apply(this, arguments);
      }

      return setProjectName;
    }()
  }, {
    key: "buildProject",
    value: function () {
      var _buildProject = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var _this = this;

        var fs, appVuePath, isVue, angularJsonPath, isAngular, angularFolder, _require, deserializeJsonFile, packageJsonPath, packageJson, _require2, _buildProject2, buildFolder, indexHtmlPath, indexHtml, files;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fs = require('fs');
                appVuePath = path.join(process.cwd(), 'src', 'App.vue');
                isVue = fs.existsSync(appVuePath);
                angularJsonPath = path.join(process.cwd(), 'angular.json');
                isAngular = fs.existsSync(angularJsonPath);
                angularFolder = path.join('dist', 'angular-bootstrap-md-app');
                _require = require('../helpers'), deserializeJsonFile = _require.deserializeJsonFile;
                packageJsonPath = path.join(this.cwd, 'package.json');
                _context2.next = 10;
                return deserializeJsonFile(packageJsonPath);

              case 10:
                packageJson = _context2.sent;

                if (!packageJson.scripts.build) {
                  _context2.next = 23;
                  break;
                }

                _require2 = require('./../helpers'), _buildProject2 = _require2.buildProject;
                _context2.next = 15;
                return _buildProject2();

              case 15:
                buildFolder = isAngular ? angularFolder : isVue ? 'dist' : 'build';
                this.cwd = path.join(this.cwd, buildFolder);
                indexHtmlPath = path.join(this.cwd, 'index.html');
                indexHtml = fs.readFileSync(indexHtmlPath, 'utf8');
                indexHtml = indexHtml.replace(/<base href="\/">/g, '<base href="./">');
                if (isVue) indexHtml = indexHtml.replace(/=\/static/g, '=./static');else if (!isAngular && !isVue) indexHtml = indexHtml.replace(/="\/static/g, '="./static');
                fs.writeFileSync(indexHtmlPath, indexHtml, 'utf8');

                if (!isAngular) {
                  files = fs.readdirSync(path.join(this.cwd, 'static', 'css'), {
                    encoding: 'utf-8'
                  });
                  files.forEach(function (file) {
                    if (file.endsWith('.css')) {
                      var cssFilePath = path.join(_this.cwd, 'static', 'css', file);
                      var cssFile = fs.readFileSync(cssFilePath, 'utf8');
                      cssFile = cssFile.replace(/\/static\/fonts/g, '../fonts').replace(/\/static\/media/g, '../media');
                      fs.writeFileSync(cssFilePath, cssFile, 'utf8');
                    }
                  });
                }

              case 23:
                return _context2.abrupt("return", Promise.resolve());

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buildProject() {
        return _buildProject.apply(this, arguments);
      }

      return buildProject;
    }()
  }, {
    key: "publish",
    value: function publish() {
      var _this2 = this;

      console.log('Publishing...');
      var spinner = new Ora({
        text: 'Uploading files'
      });
      spinner.start();
      return new Promise(function (resolve, reject) {
        _this2.options.headers['x-mdb-cli-project-name'] = _this2.projectName;
        _this2.options.headers['x-mdb-cli-package-name'] = _this2.packageName;
        var http = new HttpWrapper(_this2.options);
        var request = http.createRequest(function (response) {
          response.on('data', function (data) {
            _this2.endMsg = Buffer.from(data).toString('utf8');
          });
          response.on('end', function () {
            _this2.convertToMb(archive.pointer());

            spinner.succeed("Uploading files | ".concat(_this2.sent, " Mb"));
            _this2.result = [{
              'Status': 'published',
              'Message': "Sent ".concat(_this2.sent, " Mb")
            }];
            console.log("\n Your application will be available under ".concat(_this2.endMsg.endsWith('/') ? _this2.endMsg : _this2.endMsg + '/', " address in about 3-5 mins.\n"));
            resolve();
          });
        });
        var archive = archiver('zip', {
          zlib: {
            level: 9
          }
        });
        archive.on('error', reject);
        archive.on('warning', console.warn);
        archive.on('progress', function () {
          _this2.convertToMb(archive.pointer());

          spinner.text = "Uploading files | ".concat(_this2.sent, " Mb");
        });
        archive.pipe(request);
        archive.directory(_this2.cwd, _this2.projectName);
        archive.finalize();
      });
    }
  }, {
    key: "convertToMb",
    value: function convertToMb(pointer) {
      var num = pointer / Math.pow(1024, 2);
      this.sent = num.toFixed(3);
    }
  }, {
    key: "handleMissingPackageJson",
    value: function handleMissingPackageJson() {
      var _this3 = this;

      return helpers.createPackageJson(this.cwd).then(function (message) {
        _this3.result = [message];

        _this3.result.push({
          'Status': 0,
          'Message': 'package.json file created. Publishing...'
        });

        console.table(_this3.result);
      }).then(function () {
        return _this3.setProjectName();
      })["catch"](function (err) {
        _this3.result = [err];

        _this3.result.push({
          'Status': 'error',
          'Message': 'Missing package.json file.'
        });

        console.table(_this3.result);
        process.exit(1);
      });
    }
  }]);

  return PublishHandler;
}();

module.exports = PublishHandler;