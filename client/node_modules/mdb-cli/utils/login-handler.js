'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HttpWrapper = require('../utils/http-wrapper');

var AuthHandler = require('./auth-handler');

var helpers = require('../helpers/');

var config = require('../config');

var LoginHandler =
/*#__PURE__*/
function () {
  function LoginHandler(response) {
    var authHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new AuthHandler(false);

    _classCallCheck(this, LoginHandler);

    this.result = response;
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/auth/login',
      method: 'POST',
      data: '',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    this._userToken = '';
    this.authHandler = authHandler;
  }

  _createClass(LoginHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "askCredentials",
    value: function askCredentials() {
      var _this = this;

      var prompt = require('inquirer').createPromptModule();

      return prompt([{
        type: 'text',
        message: 'Enter your MDB username',
        name: 'username',
        validate: function validate(value) {
          /* istanbul ignore next */
          var valid = Boolean(value);
          /* istanbul ignore next */

          return valid || 'Login must not be empty.';
        }
      }, {
        type: 'password',
        message: 'Enter your MDB password',
        name: 'password',
        mask: '*',
        validate: function validate(value) {
          /* istanbul ignore next */
          var valid = Boolean(value);
          /* istanbul ignore next */

          return valid || 'Password must not be empty.';
        }
      }]).then(function (answers) {
        _this.options.data = {
          username: answers.username,
          password: answers.password
        };
      });
    }
  }, {
    key: "login",
    value: function login() {
      var http = new HttpWrapper(this.options);
      return http.post();
    }
  }, {
    key: "parseResponse",
    value: function parseResponse(response) {
      response = typeof response === 'string' ? JSON.parse(response) : response;

      var _response = response,
          _response2 = _slicedToArray(_response, 1),
          token = _response2[0].token;

      this._userToken = token;
    }
  }, {
    key: "saveToken",
    value: function saveToken() {
      try {
        var saved = helpers.saveToken(this._userToken);

        if (saved) {
          this.result = [{
            'Status': 'logged in',
            'Message': 'Login successful'
          }];
        } else {
          this.result = [{
            'Status': 'not logged in',
            'Message': 'Login failed'
          }];
        }
      } catch (e) {
        this.result = [{
          'Status': 'not logged in',
          'Message': "Login failed: ".concat(e.message)
        }];
      }
    }
  }]);

  return LoginHandler;
}();

module.exports = LoginHandler;