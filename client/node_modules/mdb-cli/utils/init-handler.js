'use strict';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var helpers = require('../helpers/');

var fs = require('fs');

var path = require('path');

var prompt = require('inquirer').createPromptModule();

var InitHandler =
/*#__PURE__*/
function () {
  function InitHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, InitHandler);

    this.result = [];
    this.cwd = process.cwd();
    this.projectSlug = '';
    this.projectRoot = '';
    this.authHeaders = {};
    this._promptShownCount = 0;
    this.authHandler = authHandler;
    this.args = {
      projectName: ''
    };
    this.isFreePackage = true;
    this.setAuthHeader();
  }

  _createClass(InitHandler, [{
    key: "setArgs",
    value: function setArgs(args) {
      this.args = _objectSpread({}, this.args, args);
    }
  }, {
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.result = this.authHandler.result;
      this.authHeaders = this.authHandler.headers;
    }
  }, {
    key: "getAvailableOptions",
    value: function getAvailableOptions() {
      var _this = this;

      return helpers.fetchProducts(this.authHeaders).then(function (orders) {
        orders = typeof orders === 'string' ? JSON.parse(orders) : orders;
        _this.result = helpers.getSorted(orders, 'product_title');
      });
    }
  }, {
    key: "showUserPrompt",
    value: function showUserPrompt() {
      var _this2 = this;

      var choices = this.result.map(function (row) {
        return {
          name: row.product_title,
          "short": row.product_slug,
          value: row.product_slug
        };
      });
      return prompt([{
        type: 'list',
        name: 'projectSlug',
        message: 'Choose project to initialize',
        choices: choices
      }]).then(function (select) {
        return _this2._handleUserProjectSelect(select);
      });
    }
  }, {
    key: "initProject",
    value: function initProject() {
      var _this3 = this;

      var filePath = path.join(this.cwd, this.projectName, 'package.json');
      fs.exists(filePath, function (err) {
        if (err) {
          helpers.showConfirmationPrompt('There is already an npm project in this location, are you sure you want to init it in this location?').then(function (answer) {
            if (answer) _this3._download();
          });
        } else {
          _this3._download();
        }
      });
    }
  }, {
    key: "_setProjectInfo",
    value: function _setProjectInfo(project) {
      var product_slug = project.product_slug;
      this.isFreePackage = project.product_id === null;

      if (this.isFreePackage) {
        this.projectSlug = product_slug.indexOf('React') === -1 ? product_slug : 'React-Template';
      } else {
        this.projectSlug = helpers.getPackageName(product_slug.slice(0, product_slug.indexOf('-')));
      }

      this.projectName = this.args.projectName ? this.args.projectName : this.projectSlug;
      this.projectRoot = path.join(this.cwd, this.projectName);
    }
  }, {
    key: "_download",
    value: function _download() {
      var _this4 = this;

      var initProject;
      return helpers.eraseProjectDirectories(this.projectSlug, this.projectName).then(function () {
        if (_this4.isFreePackage) {
          initProject = helpers.gitClone("https://github.com/mdbootstrap/".concat(_this4.projectSlug, ".git"), _this4.projectName);
        } else {
          initProject = helpers.downloadProStarter(_this4.projectSlug, _this4.authHeaders, _this4.cwd, _this4.projectName);
        }

        initProject.then(function (result) {
          _this4.result = result;

          _this4.removeGitFolder().then(function () {
            return _this4.saveMetadata();
          }).then(function () {
            return _this4.notifyServer();
          }).then(function () {
            return console.table(_this4.result);
          })["catch"](console.error);
        });
      });
    }
  }, {
    key: "removeGitFolder",
    value: function removeGitFolder() {
      var gitPath = path.join(this.projectRoot, '.git');
      return helpers.removeFolder(gitPath);
    }
  }, {
    key: "_handleUserProjectSelect",
    value: function _handleUserProjectSelect(select) {
      if (this._promptShownCount++ >= 10) {
        console.table([{
          'Status': 'suggestion',
          'Message': 'Please run `mdb list` to see available packages.'
        }]);
        process.exit(0);
      }

      var projectSlug = select.projectSlug;
      var project = this.result.find(function (row) {
        return row.product_slug === projectSlug;
      });

      if (!project.available) {
        console.log("You cannot create this project. Please visit https://mdbootstrap.com/products/".concat(project.product_slug, "/ and make sure it is available for you."));
        return this.showUserPrompt();
      }

      this._setProjectInfo(project);
    }
  }, {
    key: "saveMetadata",
    value: function saveMetadata() {
      var _this5 = this;

      var _require = require('../helpers/serialize-object-to-file'),
          serializeJsonFile = _require.serializeJsonFile;

      var metadataPath = path.join(this.projectRoot, '.mdb');
      return new Promise(function (resolve) {
        return serializeJsonFile(metadataPath, {
          packageName: _this5.projectSlug
        }).then(function () {
          _this5.result.push({
            'Status': 0,
            'Message': 'Project metadata saved.'
          });

          resolve();
        }, function () {
          return resolve();
        });
      });
    }
  }, {
    key: "notifyServer",
    value: function notifyServer() {
      var HttpWrapper = require('../utils/http-wrapper');

      var config = require('../config');

      var http = new HttpWrapper({
        port: config.port,
        hostname: config.host,
        path: '/packages/initialized',
        data: JSON.stringify({
          'projectName': this.args.projectName || this.projectSlug,
          'packageName': this.projectSlug
        }),
        headers: _objectSpread({}, this.authHeaders, {
          'Content-Type': 'application/json'
        })
      });
      return http.post();
    }
  }]);

  return InitHandler;
}();

module.exports = InitHandler;