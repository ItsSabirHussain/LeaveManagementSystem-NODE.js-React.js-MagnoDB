'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var fs = require('fs');

var LogoutHandler =
/*#__PURE__*/
function () {
  function LogoutHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, LogoutHandler);

    this.result = [];
    this.authHandler = authHandler;
  }

  _createClass(LogoutHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "logout",
    value: function logout() {
      try {
        fs.unlinkSync(this.authHandler._tokenFile);
        this.result = [{
          'Status': 'logged out',
          'Message': 'Logout successful'
        }];
      } catch (e) {
        this.result = [{
          'Status': 'not logged out',
          'Message': "Logout failed: ".concat(e.message)
        }];
        return Promise.reject(e);
      }

      return Promise.resolve();
    }
  }]);

  return LogoutHandler;
}();

module.exports = LogoutHandler;