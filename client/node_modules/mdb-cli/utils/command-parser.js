'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CommandParser =
/*#__PURE__*/
function () {
  function CommandParser() {
    _classCallCheck(this, CommandParser);

    this.args = [];
    this.command = '';
    this.validCommands = ['help', 'login', 'orders', 'list', 'publish', 'init', 'logout', 'set-name'];
  }

  _createClass(CommandParser, [{
    key: "isValid",
    value: function isValid() {
      return this.validCommands.includes(this.command);
    }
  }, {
    key: "parse",
    value: function parse(args) {
      this.args = args.slice(1);
      this.command = args[0];

      if (!this.isValid()) {
        throw new Error("'".concat(this.command, "' is invalid command"));
      }

      var path = require('path');

      var CommandClass = require(path.resolve(__dirname, '../commands', "".concat(this.command, "-command")));

      var Command = new CommandClass();
      Command.setArgs(this.args);
      Command.execute();
    }
  }]);

  return CommandParser;
}();

module.exports = new CommandParser();