'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var http = require('http');

var HttpWrapper =
/*#__PURE__*/
function () {
  function HttpWrapper(options) {
    _classCallCheck(this, HttpWrapper);

    this._requestData = options.data;
    delete options.data;
    this._options = options;
  }

  _createClass(HttpWrapper, [{
    key: "createRequest",
    value: function createRequest(callback) {
      return http.request(this._options, function (response) {
        if (callback) {
          callback(response);
        }
      });
    }
  }, {
    key: "request",
    value: function request() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var request = http.request(_this._options, function (response) {
          var result = '';
          response.on('data', function (chunk) {
            result += Buffer.from(chunk).toString('utf8');
          });
          response.on('end', function () {
            var statusCode = response.statusCode;

            if (statusCode >= 200 && statusCode < 400) {
              resolve(result);
            } else {
              reject(statusCode);
            }
          });
        });
        request.on('error', function (error) {
          return reject(error);
        });
        _this._requestData = typeof _this._requestData !== 'string' ? JSON.stringify(_this._requestData) : _this._requestData;
        request.write(_this._requestData);
        request.end();
      });
    }
  }, {
    key: "get",
    value: function get() {
      this._options.method = 'GET';
      return this.request();
    }
  }, {
    key: "post",
    value: function post() {
      this._options.method = 'POST';
      return this.request();
    }
  }, {
    key: "put",
    value: function put() {
      this._options.method = 'PUT';
      return this.request();
    }
  }]);

  return HttpWrapper;
}();

module.exports = HttpWrapper;