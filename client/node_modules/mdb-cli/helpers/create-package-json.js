'use strict';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fs = require('fs');

var path = require('path');

module.exports = {
  createPackageJson: function createPackageJson(directoryPath) {
    var packageJsonPath = path.join(directoryPath, 'package.json');
    var successStatus = {
      'Status': 0,
      'Message': 'package.json created.'
    };
    return new Promise(function (resolve, reject) {
      fs.exists(packageJsonPath, function (err) {
        if (err) {
          resolve(successStatus);
        } else {
          var _require = require('./show-confirmation-prompt'),
              showConfirmationPrompt = _require.showConfirmationPrompt;

          showConfirmationPrompt('Missing package.json file. Create?').then(function (confirmed) {
            if (confirmed) {
              var _require2 = require('child_process'),
                  spawn = _require2.spawn;

              var isWindows = process.platform === 'win32';
              var npmInit = spawn('npm', ['init'], _objectSpread({
                cwd: directoryPath,
                stdio: 'inherit'
              }, isWindows && {
                shell: true
              }));
              npmInit.on('error', function (error) {
                return reject(error);
              });
              npmInit.on('exit', function (code) {
                return code === 0 ? resolve(successStatus) : reject({
                  'Status': code,
                  'Message': 'Problem with npm initialization'
                });
              });
            } else {
              reject({
                'Status': 0,
                'Message': 'package.json not created.'
              });
            }
          });
        }
      });
    });
  }
};