'use strict';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = {
  gitClone: function gitClone(repoUrl) {
    var projectName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return new Promise(function (resolve, reject) {
      var gitArgs = projectName ? ['clone', repoUrl, projectName] : ['clone', repoUrl];
      var isWindows = process.platform === 'win32';

      var _require = require('child_process'),
          spawn = _require.spawn;

      var gitClone = spawn('git', gitArgs, _objectSpread({}, isWindows && {
        shell: true
      }));
      gitClone.stdout.on('data', function (data) {
        console.log(Buffer.from(data).toString());
      });
      gitClone.stderr.on('data', function (error) {
        console.log(Buffer.from(error).toString());
      });
      gitClone.on('error', reject);
      gitClone.on('exit', function (code) {
        if (code === 0) {
          resolve([{
            'Status': code,
            'Message': 'Initialization completed.'
          }]);
        } else {
          reject([{
            'Status': code,
            'Message': 'There were some errors. Please try again.'
          }]);
        }
      });
    });
  }
};