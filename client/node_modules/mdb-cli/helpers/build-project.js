'use strict';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = {
  buildProject: function buildProject() {
    var directoryPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();

    var _require = require('child_process'),
        spawn = _require.spawn;

    return new Promise(function (resolve, reject) {
      var isWindows = process.platform === 'win32';
      var npmBuild = spawn('npm', ['run', 'build'], _objectSpread({
        cwd: directoryPath,
        stdio: 'inherit'
      }, isWindows && {
        shell: true
      }));
      npmBuild.on('error', function (error) {
        return reject(error);
      });
      npmBuild.on('exit', function (code) {
        return code === 0 ? resolve({
          'Status': code,
          'Message': 'Success'
        }) : reject({
          'Status': code,
          'Message': 'Problem with project building'
        });
      });
    });
  }
};