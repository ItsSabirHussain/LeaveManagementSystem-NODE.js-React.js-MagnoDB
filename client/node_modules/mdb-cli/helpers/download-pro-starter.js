'use strict';

var config = require('../config');

var fs = require('fs');

var HttpWrapper = require('../utils/http-wrapper');

var unzip = require('unzipper');

var Path = require('path');

var ProgressBar = require('progress');

var _require = require('stream'),
    Readable = _require.Readable;

module.exports = {
  downloadProStarter: function downloadProStarter(packageName, headers, path, projectName) {
    return new Promise(function (resolve, reject) {
      var http = new HttpWrapper({
        port: config.port,
        hostname: config.host,
        path: "/packages/download/".concat(packageName),
        method: 'GET',
        data: '',
        headers: headers
      });
      var request = http.createRequest(function (response) {
        if (response.statusCode >= 400 && response.statusCode < 500) {
          return reject("".concat(response.statusCode, " ").concat(response.statusMessage));
        }

        var readStream = new Readable();
        var result;

        readStream._read = function () {};

        var len = Number(response.headers['content-length']);
        var bar = new ProgressBar('[:bar] :eta s', {
          complete: '=',
          incomplete: ' ',
          width: 100,
          total: len
        });
        response.on('data', function (chunk) {
          readStream.push(chunk);
          bar.tick(chunk.length);
        });
        response.on('end', function () {
          result = [{
            'Status': 'initialized',
            'Message': 'Initialization completed.'
          }];
          readStream.push(null);
          console.log('\n');
        });

        try {
          readStream.pipe(unzip.Extract({
            path: path
          })).on('close', function () {
            if (packageName !== projectName) {
              var toRename = Path.join(path, packageName);
              var destination = Path.join(path, projectName);
              fs.rename(toRename, destination, function (err) {
                if (err) reject(err);else resolve(result);
              });
            } else {
              resolve(result);
            }
          });
        } catch (e) {
          console.log(e);
          result = [{
            'Status': 'error',
            'Message': 'Error initializing your project'
          }];
          reject(result);
        }
      });
      request.on('error', reject);
      request.write('');
      request.end();
    });
  }
};