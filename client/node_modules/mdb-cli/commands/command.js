'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('../utils/auth-handler');

var config = require('../config');

var Command =
/*#__PURE__*/
function () {
  function Command() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler(true);

    _classCallCheck(this, Command);

    this.options = {
      port: config.port,
      hostname: config.host
    };
    this.args = [];
    this.result = [];
    this._handler = null;
    this.authHandler = authHandler;
  }

  _createClass(Command, [{
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.authHandler.setAuthHeader();
      this.result = this.authHandler.result;
      this.options.headers = this.authHandler.headers;
    }
  }, {
    key: "setArgs",
    value: function setArgs(args) {
      this.args = args;
    }
  }, {
    key: "execute",
    value: function execute() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "print",
    value: function print() {
      console.table(this.result);
    }
  }, {
    key: "handler",
    get: function get() {
      if (!this._handler) {
        throw new ReferenceError('Command handler must be set before using it');
      }

      return this._handler;
    },
    set: function set(value) {
      this._handler = value;
    }
  }]);

  return Command;
}();

module.exports = Command;