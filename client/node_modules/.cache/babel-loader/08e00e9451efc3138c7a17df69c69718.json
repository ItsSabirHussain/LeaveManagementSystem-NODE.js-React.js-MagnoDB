{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontShorthand = getFontShorthand;\nexports.measureText = measureText;\nexports.updateInputWidth = updateInputWidth;\nexports[\"default\"] = void 0;\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nfunction getFontShorthand(element) {\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style['font-family'] !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  return \"\".concat(style['font-style'], \" \").concat(style['font-variant'], \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {String} text Text to measure\n * @param {String} font Font to use when measuring the text\n */\n\n\nfunction measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d');\n  context.font = font;\n\n  var _context$measureText = context.measureText(text),\n      width = _context$measureText.width;\n\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\n\nfunction updateInputWidth(element) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\n\nvar _default = updateInputWidth;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}